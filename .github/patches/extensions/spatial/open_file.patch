diff --git a/spatial/src/spatial/core/io/osm/st_read_osm.cpp b/spatial/src/spatial/core/io/osm/st_read_osm.cpp
index dfe396a..87bf598 100644
--- a/spatial/src/spatial/core/io/osm/st_read_osm.cpp
+++ b/spatial/src/spatial/core/io/osm/st_read_osm.cpp
@@ -239,7 +239,7 @@ static unique_ptr<GlobalTableFunctionState> InitGlobal(ClientContext &context, T
 	auto &fs = FileSystem::GetFileSystem(context);
 	auto file_name = bind_data.file_name;
 
-	auto handle = fs.OpenFile(file_name, FileFlags::FILE_FLAGS_READ, FileLockType::READ_LOCK);
+	auto handle = fs.OpenFile(file_name, FileFlags::FILE_FLAGS_READ | FileLockType::READ_LOCK);
 	auto file_size = handle->GetFileSize();
 
 	auto max_threads = context.db->NumberOfThreads();
diff --git a/spatial/src/spatial/gdal/file_handler.cpp b/spatial/src/spatial/gdal/file_handler.cpp
index db449df..ebcefe5 100644
--- a/spatial/src/spatial/gdal/file_handler.cpp
+++ b/spatial/src/spatial/gdal/file_handler.cpp
@@ -122,7 +122,7 @@ public:
 		auto &fs = FileSystem::GetFileSystem(context);
 
 		// TODO: Double check that this is correct
-		uint8_t flags;
+		FileOpenFlags flags;
 		auto len = strlen(access);
 		if (access[0] == 'r') {
 			flags = FileFlags::FILE_FLAGS_READ;
@@ -160,14 +160,14 @@ public:
 			// Check if the file is a directory
 
 #ifdef _WIN32
-			if (fs.DirectoryExists(path) && (flags & FileFlags::FILE_FLAGS_READ)) {
+			if (fs.DirectoryExists(path) && flags.OpenForReading()) {
 				// We can't open a directory for reading on windows without special flags
 				// so just open nul instead, gdal will reject it when it tries to read
 				auto file = fs.OpenFile("nul", flags);
 				return new DuckDBFileHandle(std::move(file));
 			}
 #endif
-			auto file = fs.OpenFile(file_name, flags, FileSystem::DEFAULT_LOCK, FileCompressionType::AUTO_DETECT);
+			auto file = fs.OpenFile(file_name, flags | FileCompressionType::AUTO_DETECT);
 			return new DuckDBFileHandle(std::move(file));
 		} catch (std::exception &ex) {
 			// Failed to open file via DuckDB File System. If this doesnt have a VSI prefix we can return an error here.
@@ -209,8 +209,7 @@ public:
 
 		unique_ptr<FileHandle> file;
 		try {
-			file = fs.OpenFile(file_name, FileFlags::FILE_FLAGS_READ, FileSystem::DEFAULT_LOCK,
-			                   FileCompressionType::AUTO_DETECT);
+			file = fs.OpenFile(file_name, FileFlags::FILE_FLAGS_READ | FileCompressionType::AUTO_DETECT);
 		} catch (std::exception &ex) {
 			return -1;
 		}

# name: test/sql/secrets/create_secret_transactional.test
# description: Test secret transactional safety
# group: [secrets]

statement ok
PRAGMA enable_verification;

require httpfs

load __TEST_DIR__/create_secret_transactional.db

statement ok
set secret_directory='__TEST_DIR__/create_secret_transactional'

statement ok
PRAGMA threads=1

foreach secret_type TEMPORARY PERSISTENT

statement ok con1
BEGIN TRANSACTION

statement ok con1
CREATE ${secret_type} SECRET s1 (TYPE S3)

statement ok con2
BEGIN TRANSACTION

statement ok con2
CREATE ${secret_type} SECRET s2 (TYPE S3)

query I con1
SELECT name FROM duckdb_secrets();
----
s1

query I con2
SELECT name FROM duckdb_secrets();
----
s2

statement ok con1
COMMIT

# Transaction 2 still only sees own secret: it has not commited yet
query I con2
SELECT name FROM duckdb_secrets();
----
s2

# New transaction will see only committed secret
query I con3
SELECT name FROM duckdb_secrets();
----
s1

statement ok con2
COMMIT

# Now both are visible
query I con3
SELECT name FROM duckdb_secrets() ORDER BY name;
----
s1
s2

statement ok con1
BEGIN TRANSACTION

statement ok con1
DROP SECRET s1;

# Drop not yet commited: con3 will not see it yet
query I con3
SELECT name FROM duckdb_secrets() ORDER BY name;
----
s1
s2

# Commit the drop
statement ok con1
COMMIT

# Drop now visible to con3
query I con3
SELECT name FROM duckdb_secrets();
----
s2

# Clean up for loop end
statement ok
DROP SECRET s2

endloop

# Now lets test transactional safety of lazily loaded persistent secrets

statement ok
CREATE PERSISTENT SECRET perm_s1 (TYPE S3)

restart

statement ok
set secret_directory='__TEST_DIR__/create_secret_transactional'

# After restart, we create 2 connections that each add their own tmp secret; the perm secret is now lazily loaded!
statement ok con1
BEGIN TRANSACTION

statement ok con1
CREATE SECRET tmp_s1 (TYPE S3)

statement ok con2
BEGIN TRANSACTION

statement ok con2
CREATE SECRET tmp_s2 (TYPE S3)

# Now con1 drops the lazily loaded perm secret
statement ok con1
DROP SECRET perm_s1;

query I con1
SELECT name FROM duckdb_secrets();
----
tmp_s1

# con2 still has both secrets
query I con2
SELECT name FROM duckdb_secrets() ORDER BY name;
----
perm_s1
tmp_s2

statement ok con1
COMMIT

statement ok con2
COMMIT

# Now the deletion is visible to con2
query I con2
SELECT name FROM duckdb_secrets() ORDER BY name;
----
tmp_s1
tmp_s2